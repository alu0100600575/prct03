18. Muestra literalmente lo que está entre de las comillas simples que le pasamos al método puts.

21. ’\t\n’ = Muestra lo contenido en las comillas simples. => "\\t\\n" 
    "\t\n" = Tabula y realiza un salto de línea. => "\t\n" 
    
22. %q realiza la misma operación que las comillas simples. Muestra el valor literal de lo que se le pasa al método.
    %q{hello world\n} Muestra hello world\n.
    %q{’a’ ’b’ ’c’} Muestra 'a' 'b' 'c'
    
23. %Q interpreta los comandos que recibe el método, al igual que las comillas dobles.
    %Q{hello world\n} Muestra hello world y hace salto de línea.
    %Q{"a" "b" "c"} Muestra "a" "b" "c"
    
24. "--4--\n--2--\n"

25. "--\#{a}--\n--\#{b}--\n" 

26. s[0,2]  => "he" 
    s[-1,1] => "o" 
    s[0,10] => "hello"
    
27. => "helloworld" 

28. => "..." 
   
29. => "2 2 2 " 

30. Un array que contiene ["this", "is", "a", "test"]
 
31. Un array que contiene [\t \n] y los muestra de manera literal => ["\\t", "\\n"]

32. Un array que contiene [\t \n] e interpreta los comandos. => ["\t", "\n"]

33. [nil, nil, nil]

34. => [0, 0, 0] 

35. => [[1,2],[3,4]]

36. => [0,2,4]

37.  >> a = (’a’..’e’).to_a
     => ["a", "b", "c", "d", "e"]
     >> a[1,1]
     => [“b”]
     >> a[-2,2]
     =>        ["d", "e"]
     >> a[0..2]
     =>        ["a", "b", "c"]    
     >> a[0...1]
     =>        ["a"]
     >> a[-2..-1]
     =>        ["d", "e"]
     
38. ["A", "B", "c", "d", "e"]
    ["A", "B", "C", "D", "E"]
    [1, 2, 3, "A", "B", "C", "D", "E"]
    [3, "A", "B", "C", "D", "E"]

    [3, "A", "B", "C", "D", "Z"]
    [3, "A", "B", "C", "nil"]

39. [1, 2, 3]
    [1, 2, 3, 4, 5]
    [1, 2, 3, 4, 5, [6, 7, 8]]

    TypeError: can't convert Fixnum into Array
    
40. ["a", "b", "c", "b", "a"]
    ["a", "a"]

41. [0, 0, 0, 0, 0, 0, 0, 0]

42. [1]
    [1, 2, 3]
    [1, 2, 3, [4, 5, 6]]
    [1, 2, 3, [4, 5, 6], 7, 8]
    
43. [1, 2, 3, 4, 5]
    [5, 4, 3, 2, 1]
    [2, 3, 4]
    [4, 3, 2]
    
44. >> a = 1..10
    => 1..10
    >> a.class
    => Range
    >> a.to_a
    =>        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    >> b = 1...10
    => 1....10
    >> b.to_a
    =>        [1, 2, 3, 4, 5, 6, 7, 8, 9]
    >> b.include? 10
    =>        false
    >> b.include? 8
    =>        true
    >> b.step(2) {|x| print "#{x} " }
    =>        1 3 5 7 9 => 1...10
    >> 1..3.to_a

45. >> r = 0...100
    => 0....100
    >> r.member? 50
    =>        true
    >> r.include? 99.9
    =>        true
    >> r.member? 99.9
    =>        true
    
46. >> true.class
    =>        TrueClass
    >> false.class
    =>        FalseClass        
    >> puts "hello" if 0
    hello
    => nil
    >> puts "hello" if nil
    => nil
    >> puts "hello" if ""
    (irb):49: warning: string literal in condition            
    => nil

47. >> x = :sym
     => :sym
     >> x.class
     =>Symbol
     >> x == ’sym’
     =>false
     >> x == :sym
     =>true
     >> z = :’a long symbol’
     => :”a long symbol”
     >> z.class
     => Symbol
     >> x == ’sym’.to_sym
     => true
     >> x.to_s == ’sym’
     => true
     
48. >> s = "Ruby"
    => "Ruby"
    >> t = s
    => "Ruby"
    >> t[-1] = ""
    => ""
    >> print s
    Rub=> nil
    >> t = "Java"
    => "Java"
    >> print s, t
    RubJava=> nil
    
49. >> "%d %s" % [3, "rubies"]
    =>    “3 rubies”
    
50. >> x, y = 4, 5
    =>        [4, 5]
    >> z = x > y ? x : y
    =>        5
    >> x,y,z = [1,2,3]
    =>        [1, 2, 3]

51.

52. Hace la operación que nosotros queramos con esos valores, como por ejemplo la siguiente suma:

>> def test
>> yield(4,5)
>> end
=> nil
>> test {|a,b| puts "Resultado de la suma: #{a+b}"}
Resultado de la suma: 9
=> nil

53. counts = Hash.new(0) crea un Hash de 0 elementos y counts={} crea un array de 0 elementos.

54. => ["hello", "world", "hello", "LPP"]

55. >>c = { :a => 3, :b => 2, :c => 1 }
        {:a=>3, :b=>2, :c=>1}
    >>c.keys.sort.each { |k| puts c[k] }
    3
    2
    1
    => [:a, :b, :c]










